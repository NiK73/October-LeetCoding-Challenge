"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return None
        d = {}
        d[node] = Node(node.val)
        q = collections.deque([node])
        while q:
            cur_node = q.popleft()
            for neighbor in cur_node.neighbors:
                if neighbor not in d:
                    d[neighbor] = Node(neighbor.val)
                    q.append(neighbor)
                d[cur_node].neighbors.append(d[neighbor])
        return d[node]
